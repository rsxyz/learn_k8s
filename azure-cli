az network vnet list --query '[].{Name:name, ResourceGroup:resourceGroup, Location:location}' -o table

az network vnet subnet list --resource-group <ResourceGroupName> --vnet-name <VNetName> --query '[].{Name:name, AddressPrefix:addressPrefix}' -o table

az vm list-ip-addresses --query '[].{VMName:virtualMachine.name, PrivateIP:virtualMachine.network.privateIpAddresses[0], PublicIP:virtualMachine.network.publicIpAddresses[0].ipAddress}' -o table


az aks list --query '[].{Name:name, ResourceGroup:resourceGroup, Location:location}' -o table

az aks show --resource-group <ResourceGroupName> --name <ClusterName> --query '{Name:name, PrivateIP:networkProfile.loadBalancerProfile.effectiveOutboundIPs[0].privateIpAddress, PublicIP:networkProfile.loadBalancerProfile.effectiveOutboundIPs[0].publicIpAddress}' -o table


#!/bin/bash

# List all VNets
echo "VNets:"
az network vnet list --query '[].{Name:name, ResourceGroup:resourceGroup, Location:location}' -o table

# List all Subnets in each VNet
vnets=$(az network vnet list --query '[].{Name:name, ResourceGroup:resourceGroup}' -o tsv)
echo "Subnets:"
for vnet in $vnets; do
  resource_group=$(echo $vnet | cut -f2)
  vnet_name=$(echo $vnet | cut -f1)
  echo "VNet: $vnet_name, Resource Group: $resource_group"
  az network vnet subnet list --resource-group $resource_group --vnet-name $vnet_name --query '[].{Name:name, AddressPrefix:addressPrefix}' -o table
done

# List all VMs with their IP addresses
echo "VMs:"
az vm list-ip-addresses --query '[].{VMName:virtualMachine.name, PrivateIP:virtualMachine.network.privateIpAddresses[0], PublicIP:virtualMachine.network.publicIpAddresses[0].ipAddress}' -o table

# List all AKS clusters
echo "AKS Clusters:"
az aks list --query '[].{Name:name, ResourceGroup:resourceGroup, Location:location}' -o table

# Get details of each AKS cluster
aks_clusters=$(az aks list --query '[].{Name:name, ResourceGroup:resourceGroup}' -o tsv)
for aks in $aks_clusters; do
  resource_group=$(echo $aks | cut -f2)
  cluster_name=$(echo $aks | cut -f1)
  echo "AKS Cluster: $cluster_name, Resource Group: $resource_group"
  az aks show --resource-group $resource_group --name $cluster_name --query '{Name:name, PrivateIP:networkProfile.loadBalancerProfile.effectiveOutboundIPs[0].privateIpAddress, PublicIP:networkProfile.loadBalancerProfile.effectiveOutboundIPs[0].publicIpAddress}' -o table
done

==========================
az network vnet list --query '[].{VNetName:name, ResourceGroup:resourceGroup, Subnets:subnets}' -o table

VNET_NAME=<YourVNetName>
RESOURCE_GROUP=<YourResourceGroupName>
az network vnet show --name $VNET_NAME --resource-group $RESOURCE_GROUP --query '{VNetName:name, ResourceGroup:resourceGroup, Subnets:subnets}' -o json

az network nsg list --resource-group $RESOURCE_GROUP --query '[].{NSGName:name, ResourceGroup:resourceGroup}' -o table

NSG_NAME=<YourNSGName>
az network nsg rule list --resource-group $RESOURCE_GROUP --nsg-name $NSG_NAME --query '[].{Name:name, Priority:priority, Direction:direction, Access:access, Protocol:protocol, Source:sourceAddressPrefix, Destination:destinationAddressPrefix, SourcePort:sourcePortRange, DestinationPort:destinationPortRange}' -o table

#!/bin/bash

# Variables
RESOURCE_GROUP=<YourResourceGroupName>
VNET_NAME=<YourVNetName>

# Get Subnets in the VNet
subnets=$(az network vnet show --name $VNET_NAME --resource-group $RESOURCE_GROUP --query 'subnets[].{Name:name, NSG:networkSecurityGroup.id}' -o tsv)

# Function to extract NSG name from NSG ID
get_nsg_name_from_id() {
  echo $1 | awk -F '/' '{print $NF}'
}

# Loop through each subnet and get its NSG rules
for subnet in $subnets; do
  subnet_name=$(echo $subnet | cut -f1)
  nsg_id=$(echo $subnet | cut -f2)

  if [ "$nsg_id" != "None" ]; then
    nsg_name=$(get_nsg_name_from_id $nsg_id)
    echo "Subnet: $subnet_name, NSG: $nsg_name"
    az network nsg rule list --resource-group $RESOURCE_GROUP --nsg-name $nsg_name --query '[].{Name:name, Priority:priority, Direction:direction, Access:access, Protocol:protocol, Source:sourceAddressPrefix, Destination:destinationAddressPrefix, SourcePort:sourcePortRange, DestinationPort:destinationPortRange}' -o table
  else
    echo "Subnet: $subnet_name has no associated NSG."
  fi
done

# Get NSG rules for the VNet itself (if applicable)
vnet_nsg_id=$(az network vnet show --name $VNET_NAME --resource-group $RESOURCE_GROUP --query 'networkSecurityGroup.id' -o tsv)

if [ "$vnet_nsg_id" != "None" ]; then
  vnet_nsg_name=$(get_nsg_name_from_id $vnet_nsg_id)
  echo "VNet: $VNET_NAME, NSG: $vnet_nsg_name"
  az network nsg rule list --resource-group $RESOURCE_GROUP --nsg-name $vnet_nsg_name --query '[].{Name:name, Priority:priority, Direction:direction, Access:access, Protocol:protocol, Source:sourceAddressPrefix, Destination:destinationAddressPrefix, SourcePort:sourcePortRange, DestinationPort:destinationPortRange}' -o table
else
  echo "VNet: $VNET_NAME has no associated NSG."
fi

